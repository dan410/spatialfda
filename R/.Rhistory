}
res <- data.frame(Baddeley = sum(cluster.detected1)/n, proposed = sum(cluster.detected2)/n)
return(res)
}
SimStudy(n=10, lamfun=lamfun, kappafun=kapfun, cluster.pars=c(0.03, 5))
Lest1
Lest1 <- envelope(sim.pp, fun=Linhom, lambda=lamfun, nsim=199, correction="isotropic")
SimStudy <- function(n, lamfun, kapfun, cluster.pars){
cluster.radius <- cluster.pars[1]
cluster.n <- cluster.pars[2]
cluster.detected1 <- numeric(n) # Baddeley method
cluster.detected2 <- numeric(n) # proposed method
for(i in 1:n){
sim.clust.pp <- rPoissonCluster(kappa=kapfun, rmax=0.1, rcluster=nclust, win=W, radius=cluster.radius, n=cluster.n)
Lest1 <- envelope(sim.clust.pp, fun=Linhom, lambda=lamfun, nsim=199, correction="isotropic")
if (any(Lest1[["obs"]] > Lest1[["hi"]])){
cluster.detected1[i] <- 1
}
obspts <- data.frame(x = sim.clust.pp$x, y = sim.clust.pp$y)
Lest2 <-  kcalc_square(obspts, square_thinned_points, W, 199)
Lest2 <- as.data.frame(Lest2)
if (any(Lest2[["Liso"]] > Lest2[["Lupper"]])){
cluster.detected2[i] <- 1
}
}
res <- data.frame(Baddeley = sum(cluster.detected1)/n, proposed = sum(cluster.detected2)/n)
return(res)
}
SimStudy(n=10, lamfun=lamfun, kappafun=kapfun, cluster.pars=c(0.06, 5))
SimStudy(n=10, lamfun=lamfun, kapfun=kapfun, cluster.pars=c(0.06, 5))
sim04 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, cluster.pars=c(0.04, 5))
sim06 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, cluster.pars=c(0.06, 5))
sim08 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, cluster.pars=c(0.08, 5))
sim1 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, cluster.pars=c(0.1, 5))
sim04
sim04 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, cluster.pars=c(0.04, 5))
sim06 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, cluster.pars=c(0.06, 5))
sim08 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, cluster.pars=c(0.08, 5))
sim1 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, cluster.pars=c(0.1, 5))
sim04
sim06
sim08
sim1
sim1 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, cluster.pars=c(0.1, 5))
sim1
sim04
sim06
sim08
sim1
sim.clust.pp <- rPoissonCluster(kappa=kapfun, rmax=0.1, rcluster=nclust, win=W, radius=0.1, n=5)
plot(sim.clust.pp)
sessionInfo()
install.packages("parallel")
install.packages("paralel")
library(paralell)
library(parallel)
KLdat <- as.data.frame(KLfuncC)
Lcurves <- data.frame(lags = KLdat$lags, Liso = KLdat$Liso, Lest = KLdat$Lest)
df1 <- melt(Lcurves, id.vars=c("lags"))
p <- ggplot(df1, aes(x = lags))
p + geom_line(aes(y=value, group=variable, linetype=variable))+ geom_ribbon(data = KLdat, aes(x=lags, ymin=Llower, ymax=Lupper), alpha=0.5) + scale_y_continuous("L function")+opts(title="")
KLfuncC <- kcalc(nests, trdmpts, compoly, 99)
KLdat <- as.data.frame(KLfuncC)
Lcurves <- data.frame(lags = KLdat$lags, Liso = KLdat$Liso, Lest = KLdat$Lest)
df1 <- melt(Lcurves, id.vars=c("lags"))
p <- ggplot(df1, aes(x = lags))
p + geom_line(aes(y=value, group=variable, linetype=variable))+ geom_ribbon(data = KLdat, aes(x=lags, ymin=Llower, ymax=Lupper), alpha=0.5) + scale_y_continuous("L function")+opts(title="")
sim.pp <- rpoispp(lamfun, lmax=100, win=W )
plot(sim.pp)
Linhom.obs <- Linhom(sim.pp, lambda=lamfun, correction="isotropic")
env1 <- envelope(sim.pp, fun=Linhom, lambda=lamfun, nsim=999, correction="isotropic")
env1[["hi"]] <- env1[["hi"]] - env1[["r"]]
env1[["lo"]] <- env1[["lo"]] - env1[["r"]]
df <- data.frame(r = Linhom.obs[["r"]], obs=Linhom.obs[["iso"]] - Linhom.obs[["r"]])
p <- ggplot(df, aes(x = r))
p + geom_line(aes(y=obs)) + geom_ribbon(data=env1, aes(ymin=lo, ymax=hi), alpha=0.5)+scale_y_continuous("L function")
# define the intensity function of the "mother" process
kapfun <- function(x, y){
(1/5)*lamfun(x,y)
}
# define the function that generates "daughters" given a "mother" location
nclust <- function(x0, y0, radius, n){
return(runifdisc(n, radius, centre=c(x0,y0)))
}
sim.clust.pp <- rPoissonCluster(kappa=kapfun, rmax=0.1, rcluster=nclust, win=W, radius=0.06, n=5)
plot(sim.clust.pp)
Linhom.obs <- Linhom(sim.clust.pp, lambda=lamfun, correction="isotropic")
df <- data.frame(r = Linhom.obs[["r"]], obs=Linhom.obs[["iso"]] - Linhom.obs[["r"]])
p <- ggplot(df, aes(x = r))
p + geom_line(aes(y=obs)) + geom_ribbon(data=env1, aes(ymin=lo, ymax=hi), alpha=0.5)+scale_y_continuous("L function")
plot( envelope(sim.clust.pp, fun=Linhom, lambda=lamfun, correction="isotropic") )
Linhom.obs <- Linhom(sim.clust.pp, lambda=lamfun, correction="isotropic")
df <- data.frame(r = Linhom.obs[["r"]], obs=Linhom.obs[["iso"]] - Linhom.obs[["r"]])
p <- ggplot(df, aes(x = r))
p + geom_line(aes(y=obs)) + geom_ribbon(data=env1, aes(ymin=lo, ymax=hi), alpha=0.5)+scale_y_continuous("L function")
# define the intensity function of the "mother" process
kapfun <- function(x, y){
(1/5)*lamfun(x,y)
}
# define the function that generates "daughters" given a "mother" location
nclust <- function(x0, y0, radius, n){
return(runifdisc(n, radius, centre=c(x0,y0)))
}
sim.clust.pp <- rPoissonCluster(kappa=kapfun, rmax=0.1, rcluster=nclust, win=W, radius=0.06, n=5)
plot(sim.clust.pp)
Linhom.obs <- Linhom(sim.clust.pp, lambda=lamfun, correction="isotropic")
df <- data.frame(r = Linhom.obs[["r"]], obs=Linhom.obs[["iso"]] - Linhom.obs[["r"]])
p <- ggplot(df, aes(x = r))
p + geom_line(aes(y=obs)) + geom_ribbon(data=env1, aes(ymin=lo, ymax=hi), alpha=0.5)+scale_y_continuous("L function")
sim.clust.pp <- rPoissonCluster(kappa=kapfun, rmax=0.1, rcluster=nclust, win=W, radius=0.1, n=5)
#plot(sim.clust.pp)
Linhom.obs <- Linhom(sim.clust.pp, lambda=lamfun, correction="isotropic")
df <- data.frame(r = Linhom.obs[["r"]], obs=Linhom.obs[["iso"]] - Linhom.obs[["r"]])
p <- ggplot(df, aes(x = r))
p + geom_line(aes(y=obs)) + geom_ribbon(data=env1, aes(ymin=lo, ymax=hi), alpha=0.5)+scale_y_continuous("L function")
obspts <- data.frame(x = sim.clust.pp$x, y = sim.clust.pp$y)
KLest.square <- kcalc_square(obspts, square_thinned_points, W, 199)
plot(KLest.square[, 1], KLest.square[, 10], type="n", ylim = c(-.1, 0.1), ylab = "L function", xlab = "lag distance", main = "L Function")
lines(KLest.square[, "lags"], KLest.square[, "Liso"], lty = 2, lwd = 2)
lines(KLest.square[, "lags"], KLest.square[, "Lupper"], lty = 1, lwd = 1, col="gray")
lines(KLest.square[, "lags"], KLest.square[, "Llower"], lty = 1, lwd = 1, col="gray")
lines(KLest.square[, "lags"], KLest.square[, "Ltheor"], lty = 1, lwd = 1)
lines(KLest.square[, "lags"], KLest.square[, "Lest"], lty = 3, lwd = 2)
legend("bottomleft",legend=c("observed nests", "heterogeneous model random points", "95% confidence envelope"), lty=c(2,3,1), col=c("black","black","gray"))
KLdat <- as.data.frame(KLest.square)
Lcurves <- data.frame(lags = KLdat$lags, Liso = KLdat$Liso, Lest = KLdat$Lest)
df1 <- melt(Lcurves, id.vars=c("lags"))
p <- ggplot(df1, aes(x = lags))
p + geom_line(aes(y=value, group=variable, linetype=variable))+ geom_ribbon(data = KLdat, aes(x=lags, ymin=Llower, ymax=Lupper), alpha=0.5) + scale_y_continuous("L function")+opts(title="")
Linhom.obs <- Linhom(sim.clust.pp, lambda=lamfun, correction="isotropic")
df <- data.frame(r = Linhom.obs[["r"]], obs=Linhom.obs[["iso"]] - Linhom.obs[["r"]])
p <- ggplot(df, aes(x = r))
p + geom_line(aes(y=obs)) + geom_ribbon(data=env1, aes(ymin=lo, ymax=hi), alpha=0.5)+scale_y_continuous("L function")
KLdat <- as.data.frame(KLest.square)
Lcurves <- data.frame(lags = KLdat$lags, Liso = KLdat$Liso, Lest = KLdat$Lest)
df1 <- melt(Lcurves, id.vars=c("lags"))
p <- ggplot(df1, aes(x = lags))
p + geom_line(aes(y=value, group=variable, linetype=variable))+ geom_ribbon(data = KLdat, aes(x=lags, ymin=Llower, ymax=Lupper), alpha=0.5) + scale_y_continuous("L function")+opts(title="")
KLdat <- as.data.frame(KLfuncC)
Lcurves <- data.frame(lags = KLdat$lags, Liso = KLdat$Liso, Lest = KLdat$Lest)
df1 <- melt(Lcurves, id.vars=c("lags"))
p <- ggplot(df1, aes(x = lags))
p + geom_line(aes(y=value, group=variable, linetype=variable))+ geom_ribbon(data = KLdat, aes(x=lags, ymin=Llower, ymax=Lupper), alpha=0.5) + scale_y_continuous("L function")+opts(title="")
KLdat2 <- as.data.frame(KLest.square)
Lcurves <- data.frame(lags = KLdat2$lags, Liso = KLdat2$Liso, Lest = KLdat2$Lest)
df1 <- melt(Lcurves, id.vars=c("lags"))
p <- ggplot(df1, aes(x = lags))
p + geom_line(aes(y=value, group=variable, linetype=variable))+ geom_ribbon(data = KLdat2, aes(x=lags, ymin=Llower, ymax=Lupper), alpha=0.5) + geom_ribbon(data=env1, aes(ymin=lo, ymax=hi), alpha=0.3)+scale_y_continuous("L function")+opts(title="")
KLdat2 <- as.data.frame(KLest.square)
Lcurves <- data.frame(lags = KLdat2$lags, Liso = KLdat2$Liso, Lest = KLdat2$Lest)
df1 <- melt(Lcurves, id.vars=c("lags"))
p <- ggplot(df1, aes(x = lags))
p + geom_line(aes(y=value, group=variable, linetype=variable))+ geom_ribbon(data = KLdat2, aes(x=lags, ymin=Llower, ymax=Lupper), alpha=0.5) + geom_ribbon(data=env1, aes(x=r,ymin=lo, ymax=hi), alpha=0.3)+scale_y_continuous("L function")+opts(title="")
Linhom.obs <- Linhom(sim.clust.pp, lambda=lamfun, correction="isotropic")
df <- data.frame(r = Linhom.obs[["r"]], obs=Linhom.obs[["iso"]] - Linhom.obs[["r"]])
p <- ggplot(df, aes(x = r))
p + geom_line(aes(y=obs)) + geom_ribbon(data=env1, aes(ymin=lo, ymax=hi), alpha=0.5)+scale_y_continuous("L function")
KLdat2 <- as.data.frame(KLest.square)
Lcurves <- data.frame(lags = KLdat2$lags, Liso = KLdat2$Liso, Lest = KLdat2$Lest)
df1 <- melt(Lcurves, id.vars=c("lags"))
p <- ggplot(df1, aes(x = lags))
p + geom_line(aes(y=value, group=variable, linetype=variable))+ geom_ribbon(data = KLdat2, aes(x=lags, ymin=Llower, ymax=Lupper), alpha=0.5) + geom_ribbon(data=env1, aes(x=r,ymin=lo, ymax=hi), alpha=0.3)+scale_y_continuous("L function")+opts(title="") + geom_line(data=df, aes(x=r,y=obs))
KLdat2 <- as.data.frame(KLest.square)
Lcurves <- data.frame(lags = KLdat2$lags, Liso = KLdat2$Liso, Lest = KLdat2$Lest)
df1 <- melt(Lcurves, id.vars=c("lags"))
p <- ggplot(df1, aes(x = lags))
p + geom_line(aes(y=value, group=variable, linetype=variable))+ geom_ribbon(data = KLdat2, aes(x=lags, ymin=Llower, ymax=Lupper), alpha=0.5) + geom_ribbon(data=env1, aes(x=r,ymin=lo, ymax=hi), alpha=0.3)+scale_y_continuous("L function")+opts(title="")
sim04
sim06
sim08
sim1
?envelope
ls()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sim.res1 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
sim.res2 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
sim.res3 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
library(spatstat)
library(ggplot2)
library(reshape2)
sourceDir("../functions")
setwd("/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/do")
sourceDir("../functions")
source('~/.active-rstudio-document', echo=TRUE)
sim.res1 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
sim.res2 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
sim.res3 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
load("/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/do/duck_nest_analysis_workspace.RData")
sim.res1 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
sim.res2 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
sim.res3 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
ginterval = c(0.05, 0.15)
sim.res1 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
sim.res2 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
sim.res3 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
sim.res1
sim.res2
sim.res3
source('~/.active-rstudio-document', echo=TRUE)
sim.res1 <- SimStudy2(n=100, lamfun, ginterval=ginterval)
sim.res1 <- SimStudy2(n=1000, lamfun, ginterval=ginterval)
sim.res1
res <- data.frame(Badd = sim.res1$Baddeley, Dale = sim.res1$Dale)
apply(res, 2, mean)*100
sim.res1 <- SimStudy2(n=1000, lamfun, ginterval=ginterval)
res <- data.frame(Badd = sim.res1$Baddeley, Dale = sim.res1$Dale)
apply(res, 2, mean)*100
source('~/.active-rstudio-document', echo=TRUE)
sim.res1 <- SimStudy2(n=1000, lamfun, ginterval=ginterval)
res <- data.frame(Badd = sim.res1$Baddeley, Dale = sim.res1$Dale)
apply(res, 2, mean)*100
sim.res1 <- SimStudy2(n=1000, lamfun, ginterval=ginterval)
res <- data.frame(Badd = sim.res1$Baddeley, Dale = sim.res1$Dale)
apply(res, 2, mean)*100
sim.res1
res <- data.frame(Badd = sim.res1$Baddeley, Dale = sim.res1$Dale)
apply(res, 2, mean)*100
libarary(spatstat)
library(spatstat)
?Linhom
?Lest
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
ls()
lamfun
kapfun
ginterval
W
sim.clust1 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun,cluster.pars=c(0.04, 5), ginterval=ginterval,win=W)
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
sim.clust1 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun,cluster.pars=c(0.04, 5), ginterval=ginterval,win=W)
names(sim.clust1)
res <- data.frame(Badd = sim.clust1$Baddeley, Dale = sim.clust1$Dale)
apply(res, 2, mean)*100
sim.clust1 <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun,cluster.pars=c(0.08, 5), ginterval=ginterval,win=W)
res <- data.frame(Badd = sim.clust1$Baddeley, Dale = sim.clust1$Dale)
apply(res, 2, mean)*100
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
mean.fun.Dale <- get_mean_fun(lamfun=lamfun, win=W, test = "Dale")
mean.fun.Badd <- get_mean_fun(lamfun=lamfun, win=W, test = "Baddeley")
max.critical.Dale <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Baddeley", mean.fun=mean.fun.Badd)
max.critical.Badd <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Dale", mean.fun=mean.fun.Dale)
max.critical.Dale
max.critical.Badd
sim.res <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, ginterval=ginterval,
sim.res <- SimStudy(n=100, lamfun=lamfun, kapfun=kapfun, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
sim.res
plot(mean.fun.Dale)
mean.fun.Dale
hist(mean.fun.Dale)
str(mean.fun.Dale)
quantile(mean.fun.Dale)
plot(1:513, mean.fun.Dale)
mean.fun.Badd
plot(mean.fun.Badd)
names(mean.fun.Badd)
mean.fun.Badd[1:5]
mean.fun.Badd[1:50]
plot(mean.fun.Badd[1:50])
plot(1:10, 1:10, type = "n")
plot(mean.fun.Badd)
plot(mean.fun.Badd, type = "l")
plot(mean.fun.Dale, type = "l", col="red")
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, ginterval=NULL,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
ginterval
ginterval = c(0.03, 0.15)
max.critical.Dale
mean.fun.Dale
mean.fun.Badd
max.critical.Badd
max.critical.Dale
max.critical.Dale = max.critical.Dale
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun,cluster.pars=c(0.06, 5), ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
mean.fun.Dale <- get_mean_fun(lamfun=lamfun, win=W, test = "Dale")
mean.fun.Badd <- get_mean_fun(lamfun=lamfun, win=W, test = "Baddeley")
max.critical.Dale <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Baddeley", mean.fun=mean.fun.Badd)
max.critical.Badd <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Dale", mean.fun=mean.fun.Dale)
plot(1,1, type = "n", ylim = c(-0.01,0.01))
plot(1,1, type = "n", ylim = c(-0.01,0.01), xlim=1:513)
plot(1,1, type = "n", ylim = c(-0.01,0.01), xlim=c(0:513))
plot(1,1, type = "n", ylim = c(-0.01,0.01), xlim=c(0,513))
lines(mean.fun.Dale)
lines(mean.fun.Badd)
plot(1,1, type = "n", ylim = c(-0.01,0.1), xlim=c(0,513))
lines(mean.fun.Dale)
lines(mean.fun.Badd, col="red")
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
sim.clust.pp <- rPoissonCluster(kappa=kapfun, rmax=0.1, rcluster=nclust, win=win, radius=cluster.radius, n=cluster.n)
# Baddeley's method
Lest.Baddeley <- Linhom(sim.clust.pp, lambda = lamfun, correction = "isotropic")
win=W
sim.clust.pp <- rPoissonCluster(kappa=kapfun, rmax=0.1, rcluster=nclust, win=win, radius=cluster.radius, n=cluster.n)
# Baddeley's method
Lest.Baddeley <- Linhom(sim.clust.pp, lambda = lamfun, correction = "isotropic")
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
fix(lamfun)
kAREA1
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
plot(1,1, type = "n", ylim = c(-0.01,0.1), xlim=c(0,513))
lines(mean.fun.Dale)
lines(mean.fun.Badd, col="red")
max.critical.Dale
max.critical.Badd
mean.fun.Dale <- get_mean_fun(lamfun=lamfun, win=W, test = "Dale")
mean.fun.Badd <- get_mean_fun(lamfun=lamfun, win=W, test = "Baddeley")
max.critical.Dale <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Baddeley", mean.fun=mean.fun.Badd)
max.critical.Badd <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Dale", mean.fun=mean.fun.Dale)
lines(mean.fun.Dale, type="b")
lines(mean.fun.Badd, col="blue")
max.critical.Dale
max.critical.Badd
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
mean.fun.Dale <- get_mean_fun(lamfun=lamfun, win=W, test = "Dale")
mean.fun.Badd <- get_mean_fun(lamfun=lamfun, win=W, test = "Baddeley")
max.critical.Dale <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Baddeley", mean.fun=mean.fun.Badd)
max.critical.Badd <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Dale", mean.fun=mean.fun.Dale)
plot(1,1, type = "n", ylim = c(-0.01,0.1), xlim=c(0,513))
lines(mean.fun.Dale)
lines(mean.fun.Badd, col="blue")
max.critical.Dale
max.critical.Badd
max.critical.Dale <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Baddeley", mean.fun=mean.fun.Badd)
max.critical.Badd <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Dale", mean.fun=mean.fun.Dale)
max.critical.Dale
max.critical.Badd
max.critical.Dale <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Baddeley", mean.fun=mean.fun.Badd)
max.critical.Badd <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Dale", mean.fun=mean.fun.Dale)
max.critical.Dale
max.critical.Badd
junk <- 10:20
which (junk <= 15)
max.critical.Badd <- 0.06
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
max.critical.Badd <- 0.12
# no clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
max.critical.Dale
max.critical.Badd <- 0.11
# no clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
max.critical.Badd <- 0.11
max.critical.Dale <- 0.0367
# no clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
max.critical.Badd <- 0.11
max.critical.Dale <- 0.031
# no clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
max.critical.Badd <- 0.12
max.critical.Dale <- 0.031
# no clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
# no clustering
sim.res <- SimStudy(n=10000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
max.critical.Badd <- 0.125
max.critical.Dale <- 0.038
# no clustering
sim.res <- SimStudy(n=10000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
max.critical.Badd <- 0.128
max.critical.Dale <- 0.038
# no clustering
sim.res <- SimStudy(n=10000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
mean.fun.Dale <- get_mean_fun(lamfun=lamfun, win=W, test = "Dale")
plot(1,1, type = "n", ylim = c(-0.01,0.1), xlim=c(0,513))
lines(mean.fun.Dale)
mean.fun.Badd <- get_mean_fun(lamfun=lamfun, win=W, test = "Baddeley")
max.critical.Dale <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Baddeley", mean.fun=mean.fun.Badd)
max.critical.Badd <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Dale", mean.fun=mean.fun.Dale)
max.critical.Dale
max.critical.Badd
mean.fun.Dale <- get_mean_fun(lamfun=lamfun, win=W, test = "Dale")
mean.fun.Badd <- get_mean_fun(lamfun=lamfun, win=W, test = "Baddeley")
max.critical.Badd <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Baddeley", mean.fun=mean.fun.Badd)
max.critical.Dale <- get_max_critical(lamfun=lamfun, win=W, ginterval=ginterval, test = "Dale", mean.fun=mean.fun.Dale)
plot(1,1, type = "n", ylim = c(-0.01,0.1), xlim=c(0,513))
lines(mean.fun.Dale)
lines(mean.fun.Badd, col="blue")
max.critical.Dale
max.critical.Badd
# no clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
# no clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun, cluster.pars=NULL, ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
# with clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun,cluster.pars=c(0.06, 5), ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
# with clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun,cluster.pars=c(0.1, 5), ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
# with clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun,cluster.pars=c(0.1, 5), ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
# with clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun,cluster.pars=c(0.1, 5), ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
table(sim.res$Badd, sim.res$D)
table(sim.res$Badd, sim.res$Dale)
table(sim.res$Baddeley, sim.res$Dale)
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
# with clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun,cluster.pars=c(0.1, 5), ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
table(sim.res$Baddeley, sim.res$Dale)
names(sim.res)
source('/Volumes/06/13/dfortin/Dixon_project_summer_2012/duck_nest_analysis/functions/simulations.r')
# with clustering
sim.res <- SimStudy(n=1000, lamfun=lamfun, kapfun=kapfun,cluster.pars=c(0.1, 5), ginterval=ginterval,
max.critical.Dale = max.critical.Dale, max.critical.Badd = max.critical.Badd,
mean.fun.Dale = mean.fun.Dale, mean.fun.Badd = mean.fun.Badd, win=W)
res <- data.frame(Badd = sim.res$Baddeley, Dale = sim.res$Dale)
apply(res, 2, mean)*100
table(sim.res$Baddeley, sim.res$Dale)
plot(sim.res$stat.Dale, sim.res$stat.Baddeley)
corr(sim.res$stat.Dale, sim.res$stat.Baddeley)
cor(sim.res$stat.Dale, sim.res$stat.Baddeley)
?cor
cor(x=sim.res$stat.Dale, y=sim.res$stat.Baddeley)
sim.red$stat.Dale
sim.res$stat.Dale
plot(density(sim.res$stat.Dale))
abline(h=max.critical.Dale)
abline(v=max.critical.Dale)
